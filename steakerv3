// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract StakingContract {
    using SafeMath for uint256;

    string public name;
    string public symbol;
    uint8 public decimals;

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;

    uint256 private totalSupply;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event StakeStarted(address indexed staker, uint256 amount, uint256 endTime);
    event StakeEnded(address indexed staker, uint256 amount, uint256 penalty);

    constructor() {
        name = "Staking Token";
        symbol = "STK";
        decimals = 18;
        totalSupply = 1e12 * (10**uint256(decimals));
        balances[msg.sender] = totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        uint256 currentAllowance = allowances[sender][msg.sender];
        require(currentAllowance >= amount, "Insufficient allowance");
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, currentAllowance.sub(amount));
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return allowances[owner][spender];
    }

    function createStake(uint256 amount, uint256 duration) external {
        require(amount > 0 && balances[msg.sender] >= amount, "Insufficient balance");

        uint256 endTime = block.timestamp.add(duration.mul(1 days));
        balances[msg.sender] = balances[msg.sender].sub(amount);
        totalSupply = totalSupply.sub(amount);

        emit Transfer(msg.sender, address(0), amount); // Burn tokens

        emit StakeStarted(msg.sender, amount, endTime);
    }

    function endStake(uint256 stakeAmount) external {
        require(stakeAmount > 0, "Invalid stake amount");

        uint256 penalty = calculatePenalty(stakeAmount);
        uint256 reward = stakeAmount.sub(penalty);
        balances[msg.sender] = balances[msg.sender].add(reward);
        totalSupply = totalSupply.add(reward);

        emit Transfer(address(0), msg.sender, reward); // Mint tokens

        emit StakeEnded(msg.sender, stakeAmount, penalty);
    }

    function calculatePenalty(uint256 stakeAmount) internal view returns (uint256) {
        uint256 maxPenalty = stakeAmount.div(10);
        uint256 penalty = block.timestamp.div(1000).mul(maxPenalty);
        return penalty;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "Transfer from the zero address");
        require(recipient != address(0), "Transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(balances[sender] >= amount, "Insufficient balance");

        balances[sender] = balances[sender].sub(amount);
        balances[recipient] = balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "Approve from the zero address");
        require(spender != address(0), "Approve to the zero address");

        allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}
